/* Extension to the original Bootstrap styles */

//=====================/
//=== VARIABLES.lESS ==/

//== Grid system
// same as original Bootstrap, copying here since these are
// needed for the custom styles below
//** Number of columns in the grid.
//@grid-columns:              12;
//** Padding between columns. Gets divided in half for the left and right.
//@grid-gutter-width:         30px;

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change,
// adapting to different screen sizes.
// Tiny screen / phone
@screen-tn:                  320px;
@screen-tn-min:              @screen-tn;

// Extra large screen / extra-wide desktop
// Note: Deprecated @screen-lg and @screen-lg-desktop as of v3.0.1
@screen-xl:                  1620px;
@screen-xl-min:              @screen-xl;
@screen-xl-desktop:          @screen-xl-min;

// So media queries don't overlap when required, provide a maximum
@screen-tn-max:              (@screen-xs-min - 1);
@screen-lg-max:              (@screen-xl-min - 1);



//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Extra small screen/ phone
@container-phone:             ((430px + @grid-gutter-width));
//** For `@screen-xs-min` and up.
@container-xs:                 @container-phone;

// Large screen / wide desktop
@container-xlarge-desktop:      ((1580px + @grid-gutter-width));
//** For `@screen-lg-min` and up.
@container-xl:                 @container-xlarge-desktop;


//== Components
//
//## Define common padding and border radius sizes and more.
// Values based on 14px text and 1.428 line-height (~20px to start).
@padding-tn-vertical:       1px;
@padding-tn-horizontal:     5px;

//== Modals
//
//##
@modal-xl:                    1000px;


//==================/
//=== MIXINS.LESS ==/

// Grid System
// -----------

// Generate the extra small columns
.make-tn-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage((@columns / @grid-columns));
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);
}
.make-tn-column-offset(@columns) {
  @media (min-width: @screen-tn-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-tn-column-push(@columns) {
  @media (min-width: @screen-tn-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-tn-column-pull(@columns) {
  @media (min-width: @screen-tn-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the extra large columns
.make-xl-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-xl-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-offset(@columns) {
  @media (min-width: @screen-xl-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-push(@columns) {
  @media (min-width: @screen-xl-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-pull(@columns) {
  @media (min-width: @screen-xl-min) {
    right: percentage((@columns / @grid-columns));
  }
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.
//
.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-tn-@{index}, .col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}, .col-xl-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-tn-@{index}, .col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}, .col-xl-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}



//==================/
//=== GRID.LESS ==/
//
// Grid system
// --------------------------------------------------
.container {
  @media (min-width: @screen-xl-min) {
    width: @container-xl;
  }
}

// Tiny grid
//
// Columns, offsets, pushes, and pulls for tiny devices like
// smartphones.

.make-grid-columns-float(tn);
.make-grid(@grid-columns, tn, width);
.make-grid(@grid-columns, tn, pull);
.make-grid(@grid-columns, tn, push);
.make-grid(@grid-columns, tn, offset);


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@media (min-width: @screen-xs-min) {
  .make-grid-columns-float(xs);
  .make-grid(@grid-columns, xs, width);
  .make-grid(@grid-columns, xs, pull);
  .make-grid(@grid-columns, xs, push);
  .make-grid(@grid-columns, xs, offset);
}


// Extra large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-xl-min) {
  .make-grid-columns-float(xl);
  .make-grid(@grid-columns, xl, width);
  .make-grid(@grid-columns, xl, pull);
  .make-grid(@grid-columns, xl, push);
  .make-grid(@grid-columns, xl, offset);
}



//==================/
//=== RESPONSIVE-UTILITIES.LESS ==/

// Visibility utilities
.visible-tn {
  .responsive-invisibility();

  @media (max-width: @screen-tn-max) {
    .responsive-visibility();
  }
}
.visible-xl {
  .responsive-invisibility();

  @media (min-width: @screen-xl-min) {
    .responsive-visibility();
  }
}

.hidden-tn {
  @media (max-width: @screen-tn-max) {
    .responsive-invisibility();
  }
}
.hidden-xl {
  @media (min-width: @screen-xl-min) {
    .responsive-invisibility();
  }
}
